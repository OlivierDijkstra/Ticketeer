version: "3.9"
# Common configurations for environment variables and networks
x-common-environment-networks: &common-environment-networks
  env_file: stack.env
  networks:
    - app-network
# Common build configuration for services using the API Dockerfile
x-api-service-build: &api-service-build
  build:
    context: .
    dockerfile: ./apps/api/Dockerfile
# Common volume configuration for services using the API application code
x-api-service-volumes: &api-service-volumes
  volumes:
    - ./apps/api:/var/www/html # Mounting as read-only for security
services:
  dashboard:
    build:
      context: .
      dockerfile: ./apps/dashboard/Dockerfile
    restart: always
    <<: *common-environment-networks
    depends_on:
      - api
    ports:
      - "3000:3000"
    extra_hosts:
      - "${API_DOMAIN:-api.test.local}:host-gateway"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  api:
    <<: [*api-service-build, *common-environment-networks, *api-service-volumes]
    ports:
      - "${API_PORT:-8000}:8000"
    depends_on:
      - db
      - redis
    healthcheck:
      test: ["CMD", "php", "/var/www/html/artisan", "octane:status"]
      interval: 30s
      timeout: 10s
      retries: 3
    extra_hosts:
      - "${API_DOMAIN:-api.test.local}:host-gateway"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M

  horizon:
    <<: [*api-service-build, *common-environment-networks, *api-service-volumes]
    environment:
      CONTAINER_MODE: horizon
    depends_on:
      - api

  worker:
    <<: [*api-service-build, *common-environment-networks, *api-service-volumes]
    environment:
      CONTAINER_MODE: worker
      WORKER_COMMAND: "php /var/www/html/artisan queue:work --tries=3"
    depends_on:
      - db
      - redis
    deploy:
      replicas: 3 # Scaling the worker service
      resources:
        limits:
          cpus: '0.50'
          memory: 256M
          
  scout_worker:
    <<: [*api-service-build, *common-environment-networks, *api-service-volumes]
    environment:
      CONTAINER_MODE: worker
      WORKER_COMMAND: "php /var/www/html/artisan queue:work --queue=scout --tries=3"
    depends_on:
      - db
      - redis
    deploy:
      replicas: 2 # Scaling the scout_worker service
      resources:
        limits:
          cpus: '0.50'
          memory: 256M

  scheduler:
    <<: [*api-service-build, *common-environment-networks, *api-service-volumes]
    environment:
      CONTAINER_MODE: scheduler
    depends_on:
      - db
      - redis

  nginx:
    image: nginx:alpine
    volumes:
      - ./nginx.tmpl:/etc/nginx/conf.d/nginx.conf.template
      - ./start-nginx.sh:/start-nginx.sh
    ports:
      - "80:80"
    depends_on:
      - dashboard
      - api
    <<: *common-environment-networks
    environment:
      - DOMAIN=${DOMAIN:-test.local}
      - API_DOMAIN=${API_DOMAIN:-api.test.local}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 3
    extra_hosts:
      - "${API_DOMAIN:-api.test.local}:host-gateway"
    command: sh -c 'chmod +x /start-nginx.sh && /start-nginx.sh'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  redis:
    image: redis:alpine
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    command: redis-server --requirepass ${REDIS_PASSWORD}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    <<: *common-environment-networks
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 128M

  db:
    image: mysql:8.4
    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    volumes:
      - mysql_data:/var/lib/mysql # Persist data
    ports:
      - "${DB_PORT:-3307}:3306"
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-uroot", "-p$${MYSQL_ROOT_PASSWORD}"]
      interval: 30s
      timeout: 10s
      retries: 3
    <<: *common-environment-networks
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M

  typesense:
    image: typesense/typesense:26.0
    restart: on-failure
    command: --data-dir /data --api-key=${TYPESENSE_API_KEY} --listen-port ${TYPESENSE_PORT} --enable-cors
    volumes:
      - typesense_data:/data
    ports:
      - "${TYPESENSE_PORT:-8108}:8108"
    <<: *common-environment-networks
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
          
volumes:
  mysql_data:
  typesense_data:
networks:
  app-network:
    driver: bridge